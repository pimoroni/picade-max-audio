name: CMake

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
            cache-key: linux
            cmake-args: '-DPIMORONI_PICO_PATH=$GITHUB_WORKSPACE/pimoroni-pico -DPICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk'

    runs-on: ${{matrix.os}}

    env:
      PICO_SDK_PATH: $GITHUB_WORKSPACE/pico-sdk
      PIMORONI_PICO_LIBS: $GITHUB_WORKSPACE/pimoroni-pico
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name || github.sha}}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        path: project

    # Checkout the Pimoroni Pico Libraries
    - name: Checkout Pimoroni Pico Libraries
      uses: actions/checkout@v4
      with:
        repository: pimoroni/pimoroni-pico
        path: pimoroni-pico

    # Checkout the Pico SDK
    - name: Checkout Pico SDK
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        path: pico-sdk
        ref: 2.0.0
        submodules: true

    # Checkout Pico Extras
    - name: Checkout Pico Extras
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-extras
        path: pico-extras
        ref: sdk-2.0.0
        submodules: true

    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.2.Rel1'

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE/project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} -DCMAKE_INSTALL_PREFIX=`pwd`/install ${{matrix.cmake-args}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE -j 2

    - name: Prepare Artifact
      if: github.event_name != 'release'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE --target install -j 2

    - name: Upload Artifact
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE}}
        path: ${{runner.workspace}}/build/install

    - name: Build Release Packages
      if: github.event_name == 'release'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE --target package -j 2

    - name: Upload .zip
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.zip
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.zip
        asset_content_type: application/zip

    - name: Upload .tar.gz
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.tar.gz
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.tar.gz
        asset_content_type: application/octet-stream
